from fastapi import FastAPI
from fastapi.middleware.cors import CORSMiddleware
import os
from dotenv import load_dotenv
from loguru import logger
from contextlib import asynccontextmanager

from routes.auth_simple import auth_router
from routes.github_routes import github_router
from routes.documents_routes import documents_router
from routes.user_profile_routes import profile_router
from routes.system_routes import system_router
from routes.reviews_routes import reviews_router
from routes.employment_platforms_routes import platforms_router
from routes.rag_routes import rag_router
from services.setup_service import setup_service
from pathlib import Path

# Cargar variables de entorno desde backend/.env
load_dotenv(dotenv_path=Path(__file__).parent / '.env')


@asynccontextmanager
async def lifespan(app: FastAPI):
    """Configuraci√≥n autom√°tica al iniciar la aplicaci√≥n"""
    # Startup - Configuraci√≥n autom√°tica
    logger.info("üöÄ Iniciando OrientaTech API...")
    
    # Verificar si se necesita configuraci√≥n
    if setup_service.is_setup_required():
        logger.info("‚öôÔ∏è Ejecutando configuraci√≥n autom√°tica...")
        try:
            results = setup_service.run_full_setup()
            if all(results.values()):
                logger.success("‚úÖ Configuraci√≥n completada")
            else:
                logger.warning("‚ö†Ô∏è Configuraci√≥n parcial - algunos servicios pueden fallar")
        except Exception as e:
            logger.error(f"‚ùå Error en configuraci√≥n: {e}")
            logger.warning("‚ö†Ô∏è Continuando sin configuraci√≥n completa")
    else:
        logger.info("‚úÖ Sistema ya configurado")
    
    yield
    
    # Shutdown
    logger.info("üîÑ Cerrando aplicaci√≥n")

# Configuraci√≥n CORS
try:
    CORS_ORIGINS = eval(os.getenv("CORS_ORIGINS", '["*"]'))
except:
    CORS_ORIGINS = ["*"]


# Crear aplicaci√≥n FastAPI con configuraci√≥n autom√°tica
app = FastAPI(
    title="üöÄ OrientaTech API",
    description="""
    **API completa de autenticaci√≥n y gesti√≥n de usuarios para OrientaTech**
     """,
    version="1.0.0",
    lifespan=lifespan,
    license_info={
        "name": "MIT License",
        "url": "https://opensource.org/licenses/MIT",
    },
    docs_url="/docs",
    redoc_url="/redoc",
    openapi_tags=[
        {
            "name": "üè• Sistema",
            "description": "Endpoints de sistema, salud, informaci√≥n y monitoreo de la API.",
        },
        {
            "name": "üîê Autenticaci√≥n",
            "description": "Operaciones de autenticaci√≥n y gesti√≥n de usuarios. Incluye registro, login, gesti√≥n de tokens y perfiles de usuario.",
        },
        {
            "name": "üë§ Perfil de Usuario",
            "description": "Gesti√≥n completa del perfil personal del usuario. CRUD de informaci√≥n personal, educaci√≥n, experiencia y habilidades con autenticaci√≥n JWT.",
        },
        {
            "name": "üìÑ Documentos",
            "description": "Gesti√≥n de documentos de usuario. Subida, descarga, listado y eliminaci√≥n de CVs, cartas de presentaci√≥n y certificados con almacenamiento seguro.",
        },
        {
            "name": "üêô GitHub Integration",
            "description": "Integraci√≥n con GitHub API para obtener informaci√≥n del equipo y contribuidores del proyecto en tiempo real.",
        },
        {
            "name": "‚≠ê Reviews (Rese√±as)",
            "description": "Sistema completo de rese√±as de plataformas de empleo. CRUD con autenticaci√≥n JWT, estad√≠sticas y relaciones con plataformas laborales.",
        },
        {
            "name": "üíº Employment Platforms",
            "description": "Gesti√≥n de plataformas de empleo. Consulta, creaci√≥n y estad√≠sticas de plataformas laborales con filtros avanzados.",
        },
        {
            "name": "üîç RAG Search",
            "description": "Sistema de b√∫squeda sem√°ntica con IA. B√∫squeda inteligente de documentos usando embeddings vectoriales y similitud sem√°ntica.",
        }
    ]
)

# Configurar CORS
app.add_middleware(
    CORSMiddleware,
    allow_origins=CORS_ORIGINS,
    allow_credentials=True,
    allow_methods=["*"],
    allow_headers=["*"],
)

# Incluir routers
app.include_router(system_router)
app.include_router(auth_router)
app.include_router(profile_router)
app.include_router(documents_router)
app.include_router(platforms_router)
app.include_router(reviews_router)
app.include_router(github_router)
app.include_router(rag_router)

if __name__ == "__main__":
    import uvicorn
    uvicorn.run("main:app", host="127.0.0.1", port=8000, reload=True)